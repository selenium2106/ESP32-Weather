#include <WiFi.h>
#include <WiFiMulti.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// logo en bitmap
const unsigned char epd_bitmap_20231101_191851 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xf8, 0xfe, 0x7f, 0x0f, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xfd, 0xfe, 0x7f, 0xdf, 0xe7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xfb, 0xfe, 0x7b, 0xcf, 0xe7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x03, 0xc0, 0x71, 0xc0, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xf1, 0xf0, 0x71, 0xc1, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xf8, 0xfe, 0x7f, 0xc7, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x3e, 0x7f, 0x80, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x0f, 0x70, 0x00, 0xe3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x81, 0xff, 0x70, 0x00, 0xe7, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xfd, 0xfe, 0x70, 0x1f, 0xe7, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xf9, 0xfc, 0x70, 0x1f, 0xc7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1f, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x3f, 0xe0, 0x00, 
	0x00, 0x07, 0x1c, 0x70, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x04, 0x10, 0x40, 0x7f, 0xf0, 0x00, 
	0x00, 0x07, 0x3e, 0x70, 0x00, 0x00, 0x38, 0xe0, 0x00, 0x00, 0x06, 0x11, 0x80, 0xff, 0xf8, 0x00, 
	0x00, 0x07, 0x3e, 0x70, 0x00, 0x00, 0x38, 0xe0, 0x00, 0x00, 0x01, 0x01, 0x01, 0xff, 0xf8, 0x00, 
	0x00, 0x07, 0x36, 0x73, 0xf9, 0xfe, 0xfe, 0xff, 0x1f, 0xcd, 0xc0, 0x7c, 0x01, 0xff, 0xfc, 0x00, 
	0x00, 0x07, 0x36, 0x73, 0xfd, 0xfe, 0x7e, 0xff, 0xbf, 0xcf, 0xc0, 0xc6, 0x03, 0xff, 0xfe, 0x00, 
	0x00, 0x03, 0x37, 0x77, 0x9c, 0x0e, 0x38, 0xf7, 0xb9, 0xcf, 0x1c, 0x86, 0x73, 0xff, 0xfe, 0x00, 
	0x00, 0x03, 0xf7, 0x67, 0xfd, 0xfe, 0x38, 0xe7, 0xbf, 0xce, 0x1c, 0x86, 0x73, 0xff, 0xfe, 0x00, 
	0x00, 0x03, 0xf7, 0xe7, 0xf1, 0xee, 0x38, 0xe7, 0xbf, 0x0e, 0x00, 0xc4, 0x01, 0xff, 0xfc, 0x00, 
	0x00, 0x03, 0xe3, 0xe7, 0xf9, 0xce, 0x3c, 0xe7, 0xbf, 0xce, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xe3, 0xe3, 0xfd, 0xfe, 0x3e, 0xe7, 0x9f, 0xce, 0x01, 0x01, 0x00, 0x82, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x60, 0x1c, 0x00, 0x07, 0x00, 0x02, 0x10, 0x81, 0x86, 0x0c, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x92, 0x4c, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x30, 0x40, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_20231101_191851
};
//fin del logo

WiFiMulti wifiMulti;
Adafruit_SSD1306 display(128, 64, &Wire, -1);

const char* APIKEY = "ffbfa7f99ca8ddbee6a7d7ad199ac3ba";  // Clave API de OpenWeatherMap
String CityID = "3688928";  // ID de la ciudad que deseas consultar en OpenWeatherMap

WiFiClient client;
char servername[] = "api.openweathermap.org";
String result;

const uint32_t TiempoEsperaWifi = 5000;

void setup() {
 
  Serial.begin(115200);
  Serial.println("\nIniciando multi WiFi");
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  delay(200);
// Dibuja el logo en pantalla por 2 segundos
  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_20231101_191851, 128, 64, SSD1306_WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.display();

//lista de redes guardadas, cuantas mas mejor
  wifiMulti.addAP("tu wifi", "tu contraseña");
  wifiMulti.addAP("tu wifi2", "tu contraseña2");
  

  WiFi.mode(WIFI_STA);
 
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Conectando.");
  Serial.print("Conectando.");
  display.display();
  
  while (wifiMulti.run(TiempoEsperaWifi) != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    display.print(".");
    display.display();
  }
  Serial.println("Conectado");
  Serial.print("SSID:");
  Serial.print(WiFi.SSID());
  Serial.print(" ID:");
  Serial.println(WiFi.localIP());
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("conectado a: ");
  display.println(WiFi.SSID());
  display.println(" ");
  display.println("Direccion IP: ");
  display.println(WiFi.localIP());
  display.display();
  delay(1000);
  display.clearDisplay();
}


void loop() {
  if (client.connect(servername, 80)) {
    client.println("GET /data/2.5/weather?id=" + CityID + "&units=metric&APPID=" + APIKEY);
    client.println("Host: api.openweathermap.org");
    client.println("User-Agent: ArduinoWiFi/1.1");
    client.println("Connection: close");
    client.println();
  } else {
    Serial.println("Conexión fallida");
  }

  while (client.connected() && !client.available())
    delay(1);

  while (client.connected() || client.available()) {
    char c = client.read();
    result = result + c;
  }

  client.stop();
  result.replace('[', ' ');
  result.replace(']', ' ');

  char jsonArray[result.length() + 1];
  result.toCharArray(jsonArray, sizeof(jsonArray));
  jsonArray[result.length() + 1] = '\0';

  StaticJsonDocument<1024> doc;
  DeserializationError error = deserializeJson(doc, jsonArray);

  if (error) {
    Serial.print(F("deserializeJson() falló con el código "));
    Serial.println(error.c_str());
    return;
  }

  String location = doc["name"];
  String country = doc["sys"]["country"];
  int temperature = doc["main"]["temp"];
  int humidity = doc["main"]["humidity"];
  float pressure = doc["main"]["pressure"];
  int id = doc["id"];
  float Speed = doc["wind"]["speed"];
  int degree = doc["wind"]["deg"];
  float longitude = doc["coord"]["lon"];
  float latitude = doc["coord"]["lat"];

  Serial.println();
  Serial.print("País: ");
  Serial.println(country);
  Serial.print("Ubicación: ");
  Serial.println(location);
  Serial.print("ID de ubicación: ");
  Serial.println(id);
  Serial.printf("Temperatura: %d°C\r\n", temperature);
  Serial.printf("Humedad: %d %%\r\n", humidity);
  Serial.printf("Presión: %.2f hPa\r\n", pressure);
  Serial.printf("Velocidad del viento: %.1f m/s\r\n", Speed);
  Serial.printf("Dirección del viento: %d°\r\n", degree);
  Serial.printf("Longitud: %.2f\r\n", longitude);
  Serial.printf("Latitud: %.2f\r\n", latitude);

  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
  display.print(" Ubicacion: ");
  display.print(country);
  display.print(" ");
  display.println(location);

  display.println();
  display.setTextColor(SSD1306_WHITE, SSD1306_BLACK);
  display.print("Temp: ");
  display.print(temperature);
  display.print((char)247);
  display.println("C");
  display.print("Humedad: ");
  display.print(humidity);
  display.println("%");
  display.print("Presion: ");
  display.print(pressure);
  display.println("hPa");
  display.print("Vel. viento: ");
  display.print(Speed);
  display.println("m/s");
  display.print("Dir. viento: ");
  display.print(degree);
  display.print((char)247);

  display.display();

  delay(60000); // 10 minuto de espera antes de actualizar los datos nuevamente
}
